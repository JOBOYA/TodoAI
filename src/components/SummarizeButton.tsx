import React, { useState, useEffect } from 'react';
import { Button, Textarea, Box, Flex } from "@chakra-ui/react";
import { summarizeTasks } from './summarizeTasks';
import useTaskCollection from '../hooks/useTaskCollection';
import useColumnTasks from '../hooks/useColumnTasks';

const SummarizeButton = () => {
    // R√©cup√©rer le tableau de t√¢ches depuis le contexte
    const [taskCollection] = useTaskCollection();
   

    // Combiner toutes les t√¢ches de diff√©rentes colonnes en un seul tableau
    const tasks = Object.values(taskCollection).flat();
    // Ajouter les t√¢ches de la colonne "En cours" au tableau de t√¢ches
    


    const [summary, setSummary] = useState('');
    const [isLoading, setIsLoading] = useState(false);
    const [loadingDots, setLoadingDots] = useState('');

    // Fonction pour ajouter des emojis au r√©sum√©
    const addEmojis = (text: string) => {
        // Utiliser des emojis personnalis√©s ou pr√©d√©finis selon vos besoins
        const emojis = [
            'üëç',
            'üëå',
            'üëè',
        ];

        // Ajouter un emoji al√©atoire au texte
        const randomEmoji = emojis[Math.floor(Math.random() * emojis.length)];
        return `${text} ${randomEmoji}`;
    };

    const handleClick = async () => {
        setIsLoading(true);
        const result = await summarizeTasks(taskCollection, tasks.map(task => task.title));
        // Ajouter des emojis au r√©sum√© avant de le d√©finir dans l'√©tat
        const resultWithEmojis = addEmojis(result);

        // Cr√©er un effet de frappe en ajoutant chaque caract√®re avec un d√©lai
        for (let i = 0; i < resultWithEmojis.length; i++) {
            setTimeout(() => {
                setSummary(prevSummary => prevSummary + resultWithEmojis.charAt(i));
            }, 25 * i); // Vous pouvez ajuster le d√©lai en modifiant la valeur multipli√©e par i
        }
        setIsLoading(false);
    };

    const handleClear = () => {
        setSummary(''); // Effacer le contenu de l'√©tat summary
    };

    useEffect(() => {
        let interval: NodeJS.Timeout;
        if (isLoading) {
            interval = setInterval(() => {
                setLoadingDots(prevDots => (prevDots.length < 3 ? prevDots + '.' : ''));
            }, 300);
        }
        return () => clearInterval(interval);
    }, [isLoading]);

    return (
        <Box textAlign="center">
            <Flex justifyContent="center" mb={4}>
                <Button mr={2} onClick={handleClick}>R√©sumer les t√¢ches</Button>
                {/* Afficher le bouton "Effacer le r√©sum√©" uniquement si le r√©sum√© est affich√© */}
                {summary && <Button onClick={handleClear}>Effacer le r√©sum√©</Button>}
            </Flex>
            <Textarea
    value={isLoading ? `Chargement${loadingDots}` : summary}
    placeholder="Le r√©sum√© appara√Ætra ici..."
    isReadOnly
    borderColor="black"
    display="flex"
    justifyContent="center"
    alignItems="center"
    textAlign="justify"
    fontSize="xl"
    width={{ base: '90%', md: '600px' }} // 90% de la largeur de l'√©cran sur les petits √©crans, 600px sur les √©crans moyens et plus grands
    height={{ base: '200px', md: '400px' }} // 200px de hauteur sur les petits √©crans, 400px sur les √©crans moyens et plus grands
    mt={5}
    mx="auto" // Centrer horizontalement
/>

        </Box>
    );
};

export default SummarizeButton;
